name: Deploy Quiz to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job de valida√ß√£o
  validate:
    name: Validar arquivos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Validar HTML
        run: |
          echo "üîç Validando arquivos HTML..."
          if [ -f "index.html" ]; then
            echo "‚úÖ index.html encontrado"
            # Verificar se o HTML tem estrutura b√°sica
            if grep -q "<!DOCTYPE html>" index.html; then
              echo "‚úÖ DOCTYPE encontrado"
            else
              echo "‚ùå DOCTYPE n√£o encontrado"
              exit 1
            fi
          else
            echo "‚ùå index.html n√£o encontrado"
            exit 1
          fi

      - name: Validar CSS
        run: |
          echo "üé® Validando arquivos CSS..."
          if [ -f "styles.css" ]; then
            echo "‚úÖ styles.css encontrado"
            # Verificar se tem estilos b√°sicos
            if grep -q "body" styles.css; then
              echo "‚úÖ Estilos b√°sicos encontrados"
            else
              echo "‚ùå Estilos b√°sicos n√£o encontrados"
              exit 1
            fi
          else
            echo "‚ùå styles.css n√£o encontrado"
            exit 1
          fi

      - name: Validar JavaScript
        run: |
          echo "‚ö° Validando arquivos JavaScript..."
          if [ -f "script.js" ]; then
            echo "‚úÖ script.js encontrado"
            # Verificar se tem estrutura b√°sica do quiz
            if grep -q "quizData" script.js; then
              echo "‚úÖ Dados do quiz encontrados"
            else
              echo "‚ùå Dados do quiz n√£o encontrados"
              exit 1
            fi
          else
            echo "‚ùå script.js n√£o encontrado"
            exit 1
          fi

      - name: Verificar links
        run: |
          echo "üîó Verificando links entre arquivos..."
          # Verificar se HTML referencia CSS e JS
          if grep -q "styles.css" index.html && grep -q "script.js" index.html; then
            echo "‚úÖ Links para CSS e JS encontrados"
          else
            echo "‚ùå Links para CSS ou JS n√£o encontrados"
            exit 1
          fi

  # Job de build e deploy
  build-and-deploy:
    name: Build e Deploy
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar depend√™ncias de desenvolvimento
        run: |
          echo "üì¶ Instalando ferramentas de valida√ß√£o..."
          npm install -g html-validate
          npm install -g css-validate
          npm install -g js-validate

      - name: Validar HTML com html-validate
        run: |
          echo "üîç Validando HTML com html-validate..."
          html-validate index.html || echo "‚ö†Ô∏è Avisos de valida√ß√£o HTML (n√£o cr√≠ticos)"

      - name: Otimizar arquivos
        run: |
          echo "‚ö° Otimizando arquivos..."
          # Minificar CSS (remover espa√ßos desnecess√°rios)
          if command -v sed >/dev/null 2>&1; then
            sed 's/  */ /g' styles.css | sed 's/; /;/g' | sed 's/ {/{/g' > styles.min.css
            echo "‚úÖ CSS otimizado"
          fi
          
          # Criar arquivo de vers√£o
          echo "v$(date +%Y%m%d-%H%M%S)" > version.txt
          echo "‚úÖ Arquivo de vers√£o criado"

      - name: Preparar arquivos para deploy
        run: |
          echo "üìÅ Preparando arquivos para deploy..."
          mkdir -p dist
          cp index.html dist/
          cp styles.css dist/
          cp script.js dist/
          cp README.md dist/
          
          # Criar arquivo de informa√ß√µes do deploy
          cat > dist/deploy-info.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "workflow": "${{ github.workflow }}",
            "runner": "${{ runner.os }}"
          }
          EOF
          
          echo "‚úÖ Arquivos preparados para deploy"

      - name: Configurar Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy para GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job de notifica√ß√£o (opcional)
  notify:
    name: Notificar Deploy
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: Status do Deploy
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "üéâ Deploy realizado com sucesso!"
            echo "üì± Quiz dispon√≠vel em: ${{ needs.build-and-deploy.outputs.page_url }}"
          else
            echo "‚ùå Deploy falhou"
            exit 1
          fi
